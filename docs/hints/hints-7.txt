Your data has a time in it! You can deal with it two different ways:









1) You can parse it when reading the data in, with a d3.timeParse and strftime.org. Then use a scaleLinear() to space them out around the circle.

2) You can just pretend it isn't a time and treat it exactly like you treated months (as a category). It seems sad to do that, though, so if you want to give the other one a try I recommend it. It's fine in this situation because we have every 5 minutes. If we were missing some, though, we couldn't do this.

If you want to talk about this in #storytelling I'm happy to!














First, build a line. It's like a simpler version of the area stuff from earlier in the homework. Don't even try to fill it in!!!

















how many lines, how many datapoints?













Then add circles: how many circles, how many datapoints?












for positioning the circles, you'll set the cx and cy like how we did the on-point text labels in class. Inside of the function(d) you'll need to find the appropriate ANGLE and RADIUS for that datapoint, then do some math.














Did you know a circle can have a radius that isn't a whole number? Decimals are ok!


























Now let's draw the bands on top of it. One band for every hour. Here, I'll give you this for safekeeping:

    var bands = ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '00:00']
















This is a lot like what you did for the temperature thing, except each arc is going to be the same radius. And the same width! Only the startAngle and endAngle will change.











You can make a striped color scale with:

  d3.scaleOrdinal().range(['black', 'white'])

since it only has 2 outputs but you'll give it a lot of different inputs, it'll cycle between the two.










.lower() will push something to the back















Now we need to fill in the line, but...... we can't. Because then it will make the fun part disappear, right?











FUN TRICK: Convert it to an area - this will require you to change your d3.radialLine to a d3.radialArea and add .radius to .innerRadius and .outerRadius. Make it so that it's filled in.










So now it looks stupid, right? It's just a filled in blob and the bands are on the outside. What if instead of having the inner radius be 0 and the outer radius being the measurement we.... make the INNER radius the measurement and the OUTER radius something big?














.attr("fill", "#f9f9f9") will make it blend in with the background, or you can fill with white.










I manually positioned ALL of that text and added it one by one.


